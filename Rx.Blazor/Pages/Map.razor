@page "/Map"
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor
@using rx.core.track
@inject NavigationManager NavigationManager


@inject IBackendSignalRTrackerClient SignalRClient
<div >
    <SfMaps  Background="transparent">
        <MapsAreaSettings Background="transparent" />
        <MapsTitleSettings Text="Headquarters of the United Nations">
            <MapsTitleTextStyle FontFamily="Segoe UI" />
        </MapsTitleSettings>
        <MapsCenterPosition Latitude=" 48.13726" Longitude="11.57558" />
        <MapsZoomSettings Enable="true" ZoomFactor="10" />
        <MapsLayers>
            <MapsLayer UrlTemplate="https://a.tile.openstreetmap.org/level/tileX/tileY.png" TValue="string">
                <MapsMarkerSettings>
                    <MapsMarker Visible="true"  DataSource="@MarkerDatas" TValue="Track" >
                        <ChildContent>
                            <MapsMarkerTooltipSettings Visible="true" ValuePath="Name">
                                <MapsMarkerTooltipTextStyle FontFamily="Segoe UI"></MapsMarkerTooltipTextStyle>
                            </MapsMarkerTooltipSettings>
                        </ChildContent>
                        
                    </MapsMarker>
                </MapsMarkerSettings>
            </MapsLayer>
        </MapsLayers>
    </SfMaps>
    <div class="urllink">
        <a href="https://www.openstreetmap.org/copyright" target="_blank">© OpenStreetMap contributors</a>
    </div>
    <br />
    <div class="urllink">
        Source:
        <a href="https://en.wikipedia.org/wiki/Headquarters_of_the_United_Nations" target="_blank">en.wikipedia.org</a>
    </div>
</div>
<style>
    .markerTemplate {
        height: 30px;
        width: 20px;
        display: block;
        margin: auto;
        font-size: 14px;
        pointer-events: none;
    }
</style>
@code {
  

    public List<Track> MarkerDatas = new();




    protected override async Task OnInitializedAsync()
    {
        SignalRClient.SendTrack((Track msg) =>
        {
            MarkerDatas.Add(msg);


            InvokeAsync(this.StateHasChanged);
        });

        await SignalRClient.Start();
    }


    private void ChangeStatusServer(string server)
    {
        SignalRClient.StartStopTracker(server);


    }
 
}
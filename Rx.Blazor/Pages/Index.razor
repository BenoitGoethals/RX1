@page "/"
@using rx.core.sensor
@using Microsoft.AspNetCore.SignalR.Client
@using Rx.Blazor.Services.Authentication
@using rx.core
@using Syncfusion.Blazor.Cards
@inject NavigationManager Navigation

@inject IBackendSignalRClient SignalRClient
<PageTitle>Board</PageTitle>

<h1>Board</h1>
<div class="container-fluid">
    <div class="row">
        @if (this._messages.Count == 0)
        {
            <div class="e-error">
                <div class="e-error-content">No results found. Please try a different search.</div>
            </div>
        }
        else
        {
            @foreach (var sens in _messages.Keys)
            {
                <div class="col-md-4">

                    <SfCard>
                        <CardHeader Title="Climat Sensor" SubTitle="@_messages[sens].Sensor" />
                      
                        <CardContent>@((MarkupString)MakeContent(@_messages[sens]))</CardContent>
                        <CardFooter>
                            <CardFooterContent>
                                Start/Stop
                                    <SfSwitch TChecked="bool" OffLabel="OFF" OnLabel="ON" @bind-Checked="_messages[sens].StatusServer" @onclick="@(()=>ChangeStatusServer(_messages[sens].Sensor))"></SfSwitch>
                            </CardFooterContent>
                        </CardFooter>
                    </SfCard>
                </div>



            }
        }
    </div>
</div>

<style>
    .property-panel-section .property-panel-content td {
        padding: 0 0 15px 0;
    }

    .tile_layout.card-control-section .e-error {
        height: 100px;
        width: 100%;
    }

        .tile_layout.card-control-section .e-error .e-error-content {
            color: red;
            line-height: 100px;
            text-align: center;
        }

    .tile_layout.card-control-section .e-card .e-card-image {
        height: 180px;
        width: inherit;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-header-title {
        font-size: 20px;
        font-family: Helvetica, 'Segoe UI';
        font-weight: bold;
    }

    .tile_layout.card-control-section .e-card .e-card-header .e-card-header-caption .e-card-sub-title {
        padding-top: 5px;
    }

    .tile_layout.card-control-section .e-card .e-card-content {
        padding-top: 0px;
        height: 110px;
    }

    #source_link {
        float: right;
        margin-right: 10px;
    }
</style>

@code {

 

    private readonly Dictionary<string, SensorData> _messages = new Dictionary<string, SensorData>();

    protected override async Task OnInitializedAsync()
    {
        SignalRClient.Message((SensorData msg) =>
        {
            _messages[msg.Sensor] = msg;


            InvokeAsync(this.StateHasChanged);
        });

        await SignalRClient.Start();
    }


    private string MakeContent(SensorData sensorData) => "Status Server  : " + (sensorData.StatusServer ? "Running" : "Not Running") + "<br/>Tempature : " + sensorData.Temp + "<br/>WindSpeed : " + sensorData.WindSpeed.ToString() + "<br/>Humidity " + sensorData.Humidy;


    private void ChangeStatusServer(string server)
    {
        SignalRClient.StartStopSensor(server);


    }

}